/*
  Fuck The NSA
*/

#include <SE05X.h>



const int AES_KEY_1 = 666;
const byte aes_key_1[32] = {
  0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
};

const int AES_KEY_2 = 667;
const byte aes_key_2[32] = {
  0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
};

const int AES_KEY_3 = 668;
const byte aes_key_3[32] = {
  0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
};

const int AES_KEY_4 = 669;
const byte aes_key_4[32] = {
  0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
};

const int AES_KEY_5 = 670;
const byte aes_key_5[32] = {
  0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
};

const int AES_KEY_6 = 671;
const byte aes_key_6[32] = {
  0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
};

const int AES_KEY_7 = 672;
const byte aes_key_7[32] = {
  0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
};

const int AES_KEY_8 = 673;
const byte aes_key_8[32] = {
  0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
};

const int HMAC_KEY_1 = 674;
const byte hmac_key_1[32] = {
  0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
};

const int HMAC_KEY_2 = 675;
const byte hmac_key_2[32] = {
  0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
};

const int HMAC_KEY_3 = 676;
const byte hmac_key_3[32] = {
  0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
};

const int HMAC_KEY_4 = 677;
const byte hmac_key_4[32] = {
  0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF,
  0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
};

void setup() {
  Serial.begin(9600);
  while (!Serial);

  if (!SE05X.begin()) {
    Serial.println("Error with secure element");
    while(1);
  }

  SE05X.deleteBinaryObject(AES_KEY_1);
  SE05X.deleteBinaryObject(AES_KEY_2);
  SE05X.deleteBinaryObject(AES_KEY_3);
  SE05X.deleteBinaryObject(AES_KEY_4);
  SE05X.deleteBinaryObject(AES_KEY_5);
  SE05X.deleteBinaryObject(AES_KEY_6);
  SE05X.deleteBinaryObject(AES_KEY_7);
  SE05X.deleteBinaryObject(AES_KEY_8);
  SE05X.deleteBinaryObject(HMAC_KEY_1);
  SE05X.deleteBinaryObject(HMAC_KEY_2);
  SE05X.deleteBinaryObject(HMAC_KEY_3);
  SE05X.deleteBinaryObject(HMAC_KEY_4);

  SE05X.writeHMACKey(HMAC_KEY_1, hmac_key_1, sizeof(hmac_key_1));
  SE05X.writeHMACKey(HMAC_KEY_2, hmac_key_2, sizeof(hmac_key_2));
  SE05X.writeHMACKey(HMAC_KEY_3, hmac_key_3, sizeof(hmac_key_3));
  SE05X.writeHMACKey(HMAC_KEY_4, hmac_key_4, sizeof(hmac_key_4));

  SE05X.writeAESKey(AES_KEY_1, aes_key_1, sizeof(aes_key_1));
  SE05X.writeAESKey(AES_KEY_2, aes_key_2, sizeof(aes_key_2));
  SE05X.writeAESKey(AES_KEY_3, aes_key_3, sizeof(aes_key_3));
  SE05X.writeAESKey(AES_KEY_4, aes_key_4, sizeof(aes_key_4));
  SE05X.writeAESKey(AES_KEY_5, aes_key_5, sizeof(aes_key_5));
  SE05X.writeAESKey(AES_KEY_6, aes_key_6, sizeof(aes_key_6));
  SE05X.writeAESKey(AES_KEY_7, aes_key_7, sizeof(aes_key_7));
  SE05X.writeAESKey(AES_KEY_8, aes_key_8, sizeof(aes_key_8));
}

void loop() {

}
